generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id             String            @id @default(uuid())
  authUserId     String   @unique
  name           String
  email          String            @unique
  passwordHash   String?           // Optional since we're using Supabase auth
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  userInfo       UserInfo?
  userJourneys   UserJourney[]
  stories        Story[]           @relation("StoryAuthor")
  homeCities     UserHomeCity[]
  photoFilters   UserPhotoFilter[]
}

model UserInfo {
  userId            String     @id
  bio               String?
  avatarUrl         String?
  timezone          String     @default("Asia/Kolkata")
  originCountry     String?
  travelStyleTags   String[]   @default([])
  totalKmTravelled  Float      @default(0)
  totalCountries    Int        @default(0)
  updatedAt         DateTime   @updatedAt

  // Relation back to User
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journey {
  id            String           @id @default(uuid())
  name          String
  description   String?
  startTime     DateTime
  endTime       DateTime?
  isPublished   Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  participants  UserJourney[]
  stories       Story[]
}

model UserJourney {
  userId     String
  journeyId  String
  role       String       @default("participant")
  joinedAt   DateTime     @default(now())

  // Composite PK
  @@id([userId, journeyId])

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  journey    Journey     @relation(fields: [journeyId], references: [id], onDelete: Cascade)
}

model Story {
  id           String           @id @default(uuid())
  journeyId    String
  authorId     String?
  title        String
  content      String?
  startTime    DateTime
  endTime      DateTime?
  latitude    Float
  longitude   Float
  accuracyM   Int?
  batteryPct  Int?
  isPublished  Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  journey      Journey          @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  author       User?            @relation("StoryAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  media        StoryMedia[]
}

model StoryMedia {
  id          String    @id @default(uuid())
  storyId     String
  mediaType   String
  url         String
  metadata    Json?
  createdAt   DateTime  @default(now())

  // Relation
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model UserHomeCity {
  userId    String
  city      String
  isPrivate Boolean   @default(true)

  @@id([userId, city])

  // Relation
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPhotoFilter {
  id          String    @id @default(uuid())
  userId      String
  filterType  String
  filterValue String
  createdAt   DateTime  @default(now())

  // Relation
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

